# This file was *autogenerated* from the file main.sage
from sage.all_cmdline import *   # import sage library
_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_1p67 = RealNumber('1.67'); _sage_const_2p5 = RealNumber('2.5'); _sage_const_4 = Integer(4); _sage_const_1p0 = RealNumber('1.0'); _sage_const_1p36 = RealNumber('1.36'); _sage_const_8 = Integer(8); _sage_const_1p5 = RealNumber('1.5'); _sage_const_0p40 = RealNumber('0.40'); _sage_const_0p67 = RealNumber('0.67'); _sage_const_10 = Integer(10); _sage_const_100 = Integer(100); _sage_const_1p = RealNumber('1.'); _sage_const_0p55 = RealNumber('0.55'); _sage_const_0p4 = RealNumber('0.4'); _sage_const_15 = Integer(15); _sage_const_0p6 = RealNumber('0.6'); _sage_const_0p10 = RealNumber('0.10'); _sage_const_0p05 = RealNumber('0.05')
def funSaog(soilType, timePrd):
    t1 = _sage_const_0 ; t2 = _sage_const_0 ; t3 = _sage_const_0 ; t4 = _sage_const_0 
    eq3num = _sage_const_0 
    t2 = _sage_const_0p10 
    if(soilType=='I'):
        t3 = _sage_const_0p40 ; eq3num = _sage_const_1p0 
    elif (soilType=='II'):
        t3 = _sage_const_0p55 ; eq3num = _sage_const_1p36 
    elif(soilType=='III'):
        t3 = _sage_const_0p67 ; eq3num = _sage_const_1p67 
    else:
        Print('Unexpected soil type')
    if (timePrd < t2):
        sag = _sage_const_1p  + _sage_const_15  * timePrd
    elif(timePrd > t3):
        sag = eq3num / timePrd
    else:
        sag = _sage_const_2p5 
    return sag
load('input.sage')
latex.matrix_delimiters("[","]")
Mass=matrix(Number_of_storeys,Number_of_storeys)
for i in range(Number_of_storeys):
    for j in range(Number_of_storeys):
        if(i==j):
            Mass[i,j]=mass[j,_sage_const_0 ]
        else:
            Mass[i,j]=_sage_const_0 
Level_floor=zero_vector(RR,Number_of_storeys)
for storey_i in range(Number_of_storeys):
    Level_floor[storey_i] = Height_storey[storey_i,_sage_const_0 ]
    if(storey_i>_sage_const_0 ):
        Level_floor[storey_i]= Level_floor[storey_i]+Level_floor[storey_i - _sage_const_1 ]
Stiffness_matrix=zero_matrix(QQ,Number_of_storeys,Number_of_storeys)
for storey_i in range(Number_of_storeys):
	Stiffness_matrix[storey_i, storey_i] = Stiffness_storey[storey_i][_sage_const_0 ]
	if (storey_i < Number_of_storeys-_sage_const_1 ):
		Stiffness_matrix[storey_i, storey_i]=(
			Stiffness_matrix[storey_i, storey_i] + 
			Stiffness_storey[storey_i + _sage_const_1 ][_sage_const_0 ])
		Stiffness_matrix[storey_i, storey_i + _sage_const_1 ]=(
		-Stiffness_storey[storey_i + _sage_const_1 ][_sage_const_0 ])
		Stiffness_matrix[storey_i + _sage_const_1 , storey_i]=(
		Stiffness_matrix[storey_i, storey_i + _sage_const_1 ])
w=var('w')
q=Stiffness_matrix-(w**_sage_const_2 )*Mass
A=Stiffness_matrix*Mass.inverse()
Omega_square=A.eigenvalues()
Omega=zero_vector(RR,Number_of_storeys)
Time_period=zero_matrix(RR,Number_of_storeys,Number_of_storeys)
for i in range( Number_of_storeys):
	q=sqrt(Omega_square[i])
	Omega[i]=q
	Time_period[i,i]=n(_sage_const_2 *pi)/q
Time_periods=list()
for storey_i in range(Number_of_storeys):
	Time_periods.append(Time_period[storey_i, storey_i])
Frequency=list()
for storey_i in range(Number_of_storeys):
	Frequency.append(sqrt(Omega_square[storey_i].n(digits=_sage_const_4 )))
z=A.eigenvectors_left()
J=list()
for x in range(Number_of_storeys):
	q=matrix(z[x][_sage_const_1 ][_sage_const_0 ])
	J.append(q*Mass*q.transpose())
X=list()
for x in range(Number_of_storeys):
	q=matrix(z[x][_sage_const_1 ][_sage_const_0 ])
	X.append(q/sqrt(abs(J[x])))
Modal_participation_factor=list()
Modal_mass=list()
sum_modal_mass=_sage_const_0 
for j in range(Number_of_storeys):
        P1,P2=_sage_const_0 ,_sage_const_0 
        m=matrix(X[j])
        for i in range(Number_of_storeys):
            P1=P1+Mass[i][i]*m[_sage_const_0 ][i]
            P2=P2+Mass[i][i]*(m[_sage_const_0 ][i])**_sage_const_2 
        Modal_participation_factor.append(P1/P2)
        Modal_mass.append((P1)**_sage_const_2 /(P2))
        sum_modal_mass = sum_modal_mass + Modal_mass[j]
Modal_contribution=list()
for i in range(Number_of_storeys):
	Modal_contribution.append(((_sage_const_100  / sum_modal_mass )*Modal_mass[i]).n(digits=_sage_const_4 ))
Type_of_soil=''
for i in range (Soil_type):
   Type_of_soil = Type_of_soil+'I'
Sa_by_g=zero_matrix(RR,Number_of_storeys,Number_of_storeys)
A_h=zero_matrix(RR,Number_of_storeys,Number_of_storeys)
for index_time in range(Number_of_storeys):
	Sa_by_g[index_time,_sage_const_1 ] = funSaog(Type_of_soil, Time_periods[index_time])
 	A_h[index_time,_sage_const_1 ]= (
 	Zone_factor/_sage_const_2 *Importance_factor/
 	Response_reduction_factor * Sa_by_g[index_time,_sage_const_1 ])

XX=zero_matrix(RR,Number_of_storeys,Number_of_storeys)
for i in range(Number_of_storeys):
    XX[:,i]=matrix(RR,X[i]).transpose()
Design_lateral_force=zero_matrix(RR,Number_of_storeys,Number_of_storeys)
for index_i in range(Number_of_storeys):
    q=Mass*XX[:,index_i]
    z=q*matrix(A_h[index_i]*Modal_participation_factor[index_i]*
    Gravity_acceleration)
    Design_lateral_force[: , index_i]=z[:,_sage_const_1 ]
Peak_shear_force = zero_matrix(RR,Number_of_storeys, Number_of_storeys)
for index_j in range(Number_of_storeys):
	for index_i in range(Number_of_storeys):
		for index_k in range(Number_of_storeys - index_i ):
			Peak_shear_force[index_i,index_j]=(
			Design_lateral_force[index_k + index_i,index_j] +
			 Peak_shear_force[index_i,index_j])
Storey_shear_force = zero_matrix(RR,Number_of_storeys, Number_of_storeys)
if (Modes_considered == _sage_const_0 ):
  Modes_considered = Number_of_modes_to_be_considered
for index_i in range(Number_of_storeys):
    for index_j in range(Modes_considered):
        Storey_shear_force[index_i,_sage_const_1 ]=(Storey_shear_force[index_i,_sage_const_1 ]+ 
        abs(Peak_shear_force[index_i,index_j]))
        Storey_shear_force[index_i,_sage_const_2 ]=(Storey_shear_force[index_i,_sage_const_2 ]+
        Peak_shear_force[index_i,index_j]**_sage_const_2 )
    Storey_shear_force[index_i,_sage_const_2 ] = sqrt(Storey_shear_force[index_i,_sage_const_2 ])
P=zero_matrix(RR,Number_of_storeys,Number_of_storeys)
B=zero_matrix(RR,Number_of_storeys,Number_of_storeys)
for i in range(Number_of_storeys):
	for j in range(Number_of_storeys):
		q=Omega[i]
		r=Omega[j]
		B[i,j]=(r/q)
B=B.n(digits=_sage_const_4 )
for i in range(Number_of_storeys):
	for j in range(Number_of_storeys):
		b=_sage_const_1 +B[i,j]
		q=_sage_const_8 *(_sage_const_0p05 )**_sage_const_2 *(b)*B[i,j]**_sage_const_1p5 
		e=(_sage_const_1 -B[i,j]**_sage_const_2 )**_sage_const_2 +_sage_const_4 *(_sage_const_0p05 )*B[i,j]*(b)**_sage_const_2 
		P[i,j]=q/e
Lateral_force=zero_vector(RR,Number_of_storeys)
for i in range(Number_of_storeys):
	l=Peak_shear_force[:,i].transpose()*P*Peak_shear_force[:,i]
	Lateral_force[i]=sqrt(l[_sage_const_0 ,_sage_const_0 ])
Force=zero_vector(RR,Number_of_storeys)
for i in range(Number_of_storeys):
	if(i==Number_of_storeys-_sage_const_1 ):
		Force[i]=Lateral_force[i]
		break
	Force[i]=Lateral_force[i]-Lateral_force[i+_sage_const_1 ]
p=list()
for i in range(Number_of_storeys):
	for j in range(Number_of_storeys):
		if(j==_sage_const_0 ):
			p.append(line([(XX[j,i],Level_floor[j]),(_sage_const_0 ,_sage_const_0 )],
			color=hue(_sage_const_0p4  + _sage_const_0p6 *(i/_sage_const_10 ))))
		else:
			p.append(line([(XX[j,i],Level_floor[j]),
			(XX[j-_sage_const_1 ,i],Level_floor[j-_sage_const_1 ])],marker='o',
			color=hue(_sage_const_0p4  + _sage_const_0p6 *(i/_sage_const_10 ))))
q=plot([])
for r in range(Number_of_storeys**_sage_const_2 ):
	q= q+p[r]
