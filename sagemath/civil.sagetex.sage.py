## -*- encoding: utf-8 -*-
# This file was *autogenerated* from the file civil.sagetex.sage
from sage.all_cmdline import *   # import sage library
_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_1p67 = RealNumber('1.67'); _sage_const_6 = Integer(6); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_8 = Integer(8); _sage_const_0p40 = RealNumber('0.40'); _sage_const_0p67 = RealNumber('0.67'); _sage_const_1p = RealNumber('1.'); _sage_const_7 = Integer(7); _sage_const_119 = Integer(119); _sage_const_132 = Integer(132); _sage_const_1p0 = RealNumber('1.0'); _sage_const_111 = Integer(111); _sage_const_117 = Integer(117); _sage_const_116 = Integer(116); _sage_const_2p5 = RealNumber('2.5'); _sage_const_1p36 = RealNumber('1.36'); _sage_const_0p55 = RealNumber('0.55'); _sage_const_15 = Integer(15); _sage_const_0p10 = RealNumber('0.10'); _sage_const_123 = Integer(123); _sage_const_121 = Integer(121); _sage_const_126 = Integer(126); _sage_const_100 = Integer(100); _sage_const_129 = Integer(129); _sage_const_113 = Integer(113)## This file (civil.sagetex.sage) was *autogenerated* from civil.tex with sagetex.sty version 2012/01/16 v2.3.3-69dcb0eb93de.
import sagetex
_st_ = sagetex.SageTeXProcessor('civil', version='2012/01/16 v2.3.3-69dcb0eb93de', version_check=True)
_st_.blockbegin()
try:
  load('input.sage')
  def funSaog(soilType, timePrd):
     t1 = _sage_const_0 ; t2 = _sage_const_0 ; t3 = _sage_const_0 ; t4 = _sage_const_0 
     eq3num = _sage_const_0 
     t2 = _sage_const_0p10 
     if(soilType=='I'):
         t3 = _sage_const_0p40 ; eq3num = _sage_const_1p0 
     elif (soilType=='II'):
         t3 = _sage_const_0p55 ; eq3num = _sage_const_1p36 ;
     elif(soilType=='III'):
           t3 = _sage_const_0p67 ; eq3num = _sage_const_1p67 ;
     else:
           warning('Unexpected soil type')
     if (timePrd < t2):
         sag = _sage_const_1p  + _sage_const_15  * timePrd
     elif(timePrd > t3):
         sag = eq3num / timePrd
     else:
         sag = _sage_const_2p5 
     return sag
  latex.matrix_delimiters("[","]")
  Stiffness_matrix=zero_matrix(QQ,_sage_const_4 ,_sage_const_4 )
  for storey_i in range(Number_of_storeys):
   Stiffness_matrix[storey_i, storey_i] = Stiffness_storey[storey_i][_sage_const_0 ]
   if (storey_i < Number_of_storeys-_sage_const_1 ):
         Stiffness_matrix[storey_i, storey_i] = Stiffness_matrix[storey_i, storey_i] + Stiffness_storey[storey_i + _sage_const_1 ][_sage_const_0 ]
         Stiffness_matrix[storey_i, storey_i + _sage_const_1 ] = - Stiffness_storey[storey_i + _sage_const_1 ][_sage_const_0 ]
         Stiffness_matrix[storey_i + _sage_const_1 , storey_i] = Stiffness_matrix[storey_i, storey_i + _sage_const_1 ]
  w=var('w')
  q=Stiffness_matrix-(w**_sage_const_2 )*Mass
  A=Stiffness_matrix*Mass.inverse()
  Omega_square=A.eigenvalues()
  Time_period=zero_matrix(RR,Number_of_storeys,Number_of_storeys)
  for i in range( Number_of_storeys):
   q=sqrt(Omega_square[i])
   Time_period[i,i]=n(_sage_const_2 *pi)/q
  Time_periods=list()
  for storey_i in range(Number_of_storeys):
   Time_periods.append(Time_period[storey_i, storey_i])
  Frequency=list()
  for storey_i in range(Number_of_storeys):
   Frequency.append(sqrt(Omega_square[storey_i]))
  z=A.eigenvectors_left()
  J=list()
  for x in range(Number_of_storeys):
   q=matrix(z[x][_sage_const_1 ][_sage_const_0 ])
   J.append(q*Mass*q.transpose())
  X=list()
  for x in range(Number_of_storeys):
   q=matrix(z[x][_sage_const_1 ][_sage_const_0 ])
   X.append(q/sqrt(abs(J[x])))
  Modal_participation_factor=list()
  Modal_mass=list()
  sum_modal_mass=_sage_const_0 
  for j in range(Number_of_storeys):
         P1,P2=_sage_const_0 ,_sage_const_0 
         m=matrix(X[j])
         for i in range(Number_of_storeys):
             P1=P1+Mass[i][i]*m[_sage_const_0 ][i]
             P2=P2+Mass[i][i]*(m[_sage_const_0 ][i])**_sage_const_2 
         Modal_participation_factor.append(P1/P2)
         Modal_mass.append((P1)**_sage_const_2 /(P2))
         sum_modal_mass = sum_modal_mass + Modal_mass[j]
  Modal_contribution=list()
  for i in range(Number_of_storeys):
   Modal_contribution.append((_sage_const_100  / sum_modal_mass )*Modal_mass[i])
  Type_of_soil=''
  for i in range (Soil_type):
     Type_of_soil = Type_of_soil+'I'
  Sa_by_g=zero_matrix(RR,_sage_const_4 ,_sage_const_4 )
  A_h=zero_matrix(RR,_sage_const_4 ,_sage_const_4 )
  for index_time in range(Number_of_storeys):
   Sa_by_g[index_time,_sage_const_1 ] = funSaog(Type_of_soil, Time_periods[index_time])
   A_h[index_time,_sage_const_1 ] = Zone_factor/_sage_const_2 *Importance_factor /Response_reduction_factor * Sa_by_g[index_time,_sage_const_1 ]
  Eigen_vector=matrix(X)
  for index_i in range(Number_of_storeys):
   Design_lateral_force[:,index_i] = Mass * Eigen_vector[:,index_i]* A_h[index_i] *Modal_participation_factor[index_i] * Gravity_acceleration;
 
 
 
 
 
 
 
 
except:
 _st_.goboom(_sage_const_111 )
_st_.blockend()
try:
 _st_.inline(_sage_const_0 , latex(q))
except:
 _st_.goboom(_sage_const_113 )
try:
 _st_.inline(_sage_const_1 , latex(Stiffness_matrix))
except:
 _st_.goboom(_sage_const_116 )
try:
 _st_.inline(_sage_const_2 , latex(Mass))
except:
 _st_.goboom(_sage_const_117 )
try:
 _st_.inline(_sage_const_3 , latex(Omega_square))
except:
 _st_.goboom(_sage_const_119 )
try:
 _st_.inline(_sage_const_4 , latex(Time_period))
except:
 _st_.goboom(_sage_const_121 )
try:
 _st_.inline(_sage_const_5 , latex(X))
except:
 _st_.goboom(_sage_const_123 )
try:
 _st_.inline(_sage_const_6 , latex(Modal_participation_factor))
except:
 _st_.goboom(_sage_const_126 )
try:
 _st_.inline(_sage_const_7 , latex(Modal_mass))
except:
 _st_.goboom(_sage_const_129 )
try:
 _st_.inline(_sage_const_8 , latex(Modal_contribution))
except:
 _st_.goboom(_sage_const_132 )
_st_.endofdoc()
