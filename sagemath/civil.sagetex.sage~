## -*- encoding: utf-8 -*-
## This file (civil.sagetex.sage) was *autogenerated* from civil.tex with sagetex.sty version 2012/01/16 v2.3.3-69dcb0eb93de.
import sagetex
_st_ = sagetex.SageTeXProcessor('civil', version='2012/01/16 v2.3.3-69dcb0eb93de', version_check=True)
_st_.blockbegin()
try:
 load('input.sage')
 def funSaog(soilType, timePrd):
     t1 = 0; t2 = 0; t3 = 0; t4 = 0
     eq3num = 0
     t2 = 0.10
     if(soilType=='I'):
         t3 = 0.40; eq3num = 1.0
     elif (soilType=='II'):
         t3 = 0.55; eq3num = 1.36
     elif(soilType=='III'):
         t3 = 0.67; eq3num = 1.67
     else:
         warning('Unexpected soil type')
 if (timePrd < t2):
         sag = 1. + 15 * timePrd
 elif(timePrd > t3):
         sag = eq3num / timePrd
 else:
         sag = 2.5
 return sag
 latex.matrix_delimiters("[","]")
 Stiffness_matrix=zero_matrix(QQ,4,4)
 for storey_i in range(Number_of_storeys):
 Stiffness_matrix[storey_i, storey_i] = Stiffness_storey[storey_i][0]
 if (storey_i < Number_of_storeys-1):
 	Stiffness_matrix[storey_i, storey_i] = Stiffness_matrix[storey_i, storey_i] + Stiffness_storey[storey_i + 1][0]
 	Stiffness_matrix[storey_i, storey_i + 1] = - Stiffness_storey[storey_i + 1][0]
 	Stiffness_matrix[storey_i + 1, storey_i] = Stiffness_matrix[storey_i, storey_i + 1]
 w=var('w')
 q=Stiffness_matrix-(w^2)*Mass
 A=Stiffness_matrix*Mass.inverse()
 Omega_square=A.eigenvalues()
 Time_period=zero_matrix(RR,Number_of_storeys,Number_of_storeys)
 for i in range( Number_of_storeys):
 q=sqrt(Omega_square[i])
 Time_period[i,i]=n(2*pi)/q
 Time_periods=list()
 for storey_i in range(Number_of_storeys):
 Time_periods.append(Time_period[storey_i, storey_i])
 Frequency=list()
 for storey_i in range(Number_of_storeys):
 Frequency.append(sqrt(Omega_square[storey_i]))
 z=A.eigenvectors_left()
 J=list()
 for x in range(Number_of_storeys):
 q=matrix(z[x][1][0])
 J.append(q*Mass*q.transpose())
 X=list()
 for x in range(Number_of_storeys):
 q=matrix(z[x][1][0])
 X.append(q/sqrt(abs(J[x])))
 Modal_participation_factor=list()
 Modal_mass=list()
 sum_modal_mass=0
 for j in range(Number_of_storeys):
         P1,P2=0,0
         m=matrix(X[j])
         for i in range(Number_of_storeys):
             P1=P1+Mass[i][i]*m[0][i]
             P2=P2+Mass[i][i]*(m[0][i])**2
         Modal_participation_factor.append(P1/P2)
         Modal_mass.append((P1)**2/(P2))
         sum_modal_mass = sum_modal_mass + Modal_mass[j]
 Modal_contribution=list()
 for i in range(Number_of_storeys):
 Modal_contribution.append((100 / sum_modal_mass )*Modal_mass[i])
 Type_of_soil=''
 for i in range (Soil_type):
    Type_of_soil = Type_of_soil+'I'
 Sa_by_g=zero_matrix(RR,4,4)
 A_h=zero_matrix(RR,4,4)
 for index_time in range(Number_of_storeys):
 Sa_by_g[index_time,1] = funSaog(Type_of_soil, Time_periods[index_time])
   A_h[index_time,1] = Zone_factor/2*Importance_factor /Response_reduction_factor * Sa_by_g[index_time,1]
 '''
 for index_i in range(Number_of_storeys):
   Design_lateral_force[:,index_i] = Mass * Eigen_vector[:,index_i] * A_h[index_i] *Modal_participation_factor[index_i]* Gravity_acceleration
 Peak_shear_force = zeros_matrix(RR,Number_of_storeys, Number_of_storeys)
 for index_j in range(Number_of_storeys):
 for index_i in range(Number_of_storeys):
 for index_k in range(Number_of_storeys - index_i +1):
 Peak_shear_force[index_i,index_j] = Design_lateral_force[index_k + index_i -1,index_j] + Peak_shear_force[index_i,index_j]
 '''
 
 
 
 
 
 
except:
 _st_.goboom(115)
_st_.blockend()
try:
 _st_.inline(0, latex(q))
except:
 _st_.goboom(117)
try:
 _st_.inline(1, latex(Stiffness_matrix))
except:
 _st_.goboom(121)
try:
 _st_.inline(2, latex(Mass))
except:
 _st_.goboom(124)
try:
 _st_.inline(3, latex(Omega_square))
except:
 _st_.goboom(127)
try:
 _st_.inline(4, latex(Time_period))
except:
 _st_.goboom(129)
try:
 _st_.inline(5, latex(X))
except:
 _st_.goboom(131)
try:
 _st_.inline(6, latex(Modal_participation_factor))
except:
 _st_.goboom(134)
try:
 _st_.inline(7, latex(Modal_mass))
except:
 _st_.goboom(137)
try:
 _st_.inline(8, latex(Modal_contribution))
except:
 _st_.goboom(140)
_st_.endofdoc()
